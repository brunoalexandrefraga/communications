---
title: Diversidade no Tempo
subtitle: Atividade 02
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
  Neste trabalho, são analisados modelos de propagação de sinais em canais de comunicação sem fio. Na Tarefa 1, é estimado um modelo de perda por log-distância utilizando medidas experimentais e o modelo de espaço livre para calcular a potência recebida a uma distância de referência. A potência recebida é estimada para 200 m, e uma curva representando o modelo é traçada até 1 km. Na Tarefa 2, é estudado o desempenho de um sistema com propagação log-normal para determinar o alcance máximo que assegure uma taxa mínima de sucesso de 90%, considerando restrições de relação sinal-ruído (SNR).
keywords: 
  - Propagação de sinais
  - Larga escala
  - Probabilidade de outage
date: last-modified
bibliography: bibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}
          \usepackage{comment}

          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Comunicações sem Fio
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

# Tarefa 1

```{python}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
from scipy.special import gamma, gammainc

# Função para calcular a probabilidade de outage para o canal Rayleigh
def rayleigh_outage(y_db, RB, N):
    y_ = np.power(10, y_db / 10)  # Convertendo SNR de dB para linear
    return np.power(1 - np.exp(-1 * (np.power(2, RB) - 1) / y_), N)

# Função para calcular a probabilidade de outage para o canal Nakagami-m
def nakagami_m_outage(y_db, RB, m, N):
    y_ = np.power(10, y_db / 10)  # Convertendo SNR de dB para linear
    return np.power(gammainc(m, (m * (np.power(2, RB) - 1)) / y_), N)

# Parâmetros
N_arr = np.array([1, 2, 3, 6])  # Tentativas ARQ para Rayleigh
m_arr = np.array([2, 3, 6])  # Parâmetros m para Nakagami-m
RB = 2  # Taxa de transmissão R/B = 2 bps/Hz
SNR = np.arange(0.1, 60, 0.1)  # Intervalo de SNR (em dB)

# Criando o gráfico
plt.figure(figsize=(16, 10))
plt.yscale('log')  # Escala logarítmica para a probabilidade de outage

# Plotando para o canal Rayleigh
for N in N_arr:
    outage = rayleigh_outage(SNR, RB, N)
    plt.plot(SNR, outage, label=f'Rayleigh (N = {N})')

# Plotando para o canal Nakagami-m
for m in m_arr:
    outage = nakagami_m_outage(SNR, RB, m, 1)
    plt.plot(SNR, outage, label=f'Nakagami (m = {m})', linestyle='--')

# Configurações do gráfico
plt.ylim(bottom=1e-6, top=1)  # Limites do eixo y
plt.xlabel('SNR [dB]', fontsize=20)
plt.ylabel('Probabilidade de Outage', fontsize=20)
plt.tick_params(labelsize=16)
plt.legend(fontsize=20)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.show()


```

Pode-se verificar que no canal Rayleigh sem diversidade, a probabilidade de outage é significativamente maior em comparação ao canal Nakagami-m (o que já é de se esperar), especialmente à medida que o parâmetro m aumenta. Entretanto, ao incluir o protocolo ARQ, o desempenho do canal Rayleigh se aproxima do Nakagami-m, mostrando que o ARQ pode melhorar consideravelmente o desempenho do canal Rayleigh.

# Tarefa 2

```{python}
#| echo: false
import os
from scipy.stats import nakagami
import matplotlib.pyplot as plt
import numpy as np

# Caminho relativo para o arquivo
file_path = "../Measure/Fading_02_noLoS_wall_move_5steps_home.txt"

p = 100  # Valor recomendado

# Funções de conversão
def w_to_dbm(watts):
    return 10 * np.log10(watts * 1000)

def dbm_to_w(dbm):
    return np.power(10, ((dbm / 10) - 3))

def estimate_m_parameter(h, p):
  # Implementação do estimador de Nakagami-m
  u_p = np.sum(np.power(h, 1/p)) / len(h)
  u_2 = np.sum(np.power(h, 2)) / len(h)
  u_2p = np.sum(np.power(h, 2 + 1/p)) / len(h)

  # Calcular o parâmetro m
  m = (u_p * u_2) / ((u_2p - u_p * u_2)*2*p)
  return m

# Ler os dados de cada arquivo
Pr = []
Pr_dbm = []

# Verificar se o arquivo existe antes de abrir
if os.path.exists(file_path):
    with open(file_path, 'r') as f:
        lines = f.readlines()

        for line in lines:
            # Verificar se a linha contém erro CRC
            if "CRC error" in line:
                readings = -120  # Valor substituto para erro CRC
            else:
                try:
                    readings = float(line.split(" | ")[-1])
                except ValueError as e:
                    readings = -120
                    continue  # Pular linhas que não podem ser convertidas

            Pr_dbm.append(readings)
            Pr.append(dbm_to_w(readings))

    Pr = np.array(Pr)
    Pr_dbm = np.array(Pr_dbm)

    # CASO BASE
    mean_Pr = np.mean(Pr)  # Média das médias
    h = np.sqrt(Pr / mean_Pr)
    m = estimate_m_parameter(h, p)

    print(f"O parâmetro m estimado para o CASO BASE é {m}")

    x_nakagami = np.linspace(min(h), max(h), 10000)  # Valores para gerar a PDF
    pdf_nakagami = nakagami.pdf(x_nakagami, m)

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

    x_rssi = np.arange(len(Pr))  # Valores para a abscissa do gráfico do RSSI

    # Plotar o RSSI instantâneo e médio
    ax1.plot(x_rssi, Pr_dbm, label='Instantâneo', linewidth=0.5)
    ax1.plot(x_rssi, np.full_like(x_rssi, w_to_dbm(mean_Pr)), label=f'Médio: {w_to_dbm(mean_Pr):.2f} dBm', linewidth=2)
    ax1.set_xlabel('Medida')
    ax1.set_ylabel('RSSI (dBm)')
    ax1.set_title(f'RSSI - Caso Base')
    ax1.legend()

    # Plotar o histograma e a PDF Nakagami-m ajustada
    ax2.hist(h, density=True, bins=20, alpha=0.7, label="Medidas")
    ax2.plot(x_nakagami, pdf_nakagami, 'r-', label=f"Nakagami m={m:.5f}")
    ax2.set_xlabel("|h|")
    ax2.set_ylabel("pdf(|h|)")
    ax2.set_title(f"Histograma e PDF Nakagami - Caso Base")
    ax2.legend()

    plt.tight_layout()
    plt.show()

else:
    print(f"O arquivo {file_path} não foi encontrado.")
```

```{python}
#| echo: false
# Caso Agrupamento 2 a 2
Pr = np.array(Pr)
Pr_dbm = np.array(Pr_dbm)

Pr2x2 = np.maximum(Pr[:-1:2], Pr[1::2])
Pr2x2_dbm = np.maximum(Pr_dbm[:-1:2], Pr_dbm[1::2])

mean_Pr2x2 = np.mean(Pr2x2)  # Média das médias
h = np.sqrt(Pr2x2 / mean_Pr2x2)
m = estimate_m_parameter(h, p)

print(f"O parâmetro m estimado para o Caso Agrupamento 2 a 2 é: {m}")

x_nakagami = np.linspace(min(h), max(h), 10000)  # Valores para gerar a PDF
pdf_nakagami = nakagami.pdf(x_nakagami, m)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

x_rssi = np.arange(len(Pr2x2))  # Valores para a abscissa do gráfico do RSSI

# Plotar o RSSI instantâneo e médio
ax1.plot(x_rssi, Pr2x2_dbm, label='Instantâneo', linewidth=0.5)
ax1.plot(x_rssi, np.full_like(x_rssi, w_to_dbm(mean_Pr2x2)), label=f'Médio: {w_to_dbm(mean_Pr2x2):.2f} dBm', linewidth=2)
ax1.set_xlabel('Medida')
ax1.set_ylabel('RSSI (dBm)')
ax1.set_title(f'RSSI - Caso 2x2')
ax1.legend()

# Plotar o histograma e a PDF Nakagami-m ajustada
ax2.hist(h, density=True, bins=20, alpha=0.7, label="Medidas")
ax2.plot(x_nakagami, pdf_nakagami, 'r-', label=f"Nakagami m={m:.5f}")
ax2.set_xlabel("|h|")
ax2.set_ylabel("pdf(|h|)")
ax2.set_title(f"Histograma e PDF Nakagami - Caso 2x2")
ax2.legend()


plt.tight_layout()
plt.show()
```

```{python}
#| echo: false

# Caso Agrupamento 2 a 2 com embaralhamento das medidas
Pr = np.array(Pr)
Pr_dbm = np.array(Pr_dbm)

np.random.shuffle(Pr)
np.random.shuffle(Pr_dbm)

Pr2x2 = np.maximum(Pr[:-1:2], Pr[1::2])
Pr2x2_dbm = np.maximum(Pr_dbm[:-1:2], Pr_dbm[1::2])

mean_Pr2x2 = np.mean(Pr2x2)  # Média das médias
h = np.sqrt(Pr2x2 / mean_Pr2x2)
m = estimate_m_parameter(h, p)

print(f"O parâmetro m estimado para o Caso Agrupamento 2 a 2 é: {m}")

x_nakagami = np.linspace(min(h), max(h), 10000)  # Valores para gerar a PDF
pdf_nakagami = nakagami.pdf(x_nakagami, m)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

x_rssi = np.arange(len(Pr2x2))  # Valores para a abscissa do gráfico do RSSI

# Plotar o RSSI instantâneo e médio
ax1.plot(x_rssi, Pr2x2_dbm, label='Instantâneo', linewidth=0.5)
ax1.plot(x_rssi, np.full_like(x_rssi, w_to_dbm(mean_Pr2x2)), label=f'Médio: {w_to_dbm(mean_Pr2x2):.2f} dBm', linewidth=2)
ax1.set_xlabel('Medida')
ax1.set_ylabel('RSSI (dBm)')
ax1.set_title(f'RSSI - Caso 2x2 Embaralhado')
ax1.legend()

# Plotar o histograma e a PDF Nakagami-m ajustada
ax2.hist(h, density=True, bins=20, alpha=0.7, label="Medidas")
ax2.plot(x_nakagami, pdf_nakagami, 'r-', label=f"Nakagami m={m:.5f}")
ax2.set_xlabel("|h|")
ax2.set_ylabel("pdf(|h|)")
ax2.set_title(f"Histograma e PDF Nakagami - Caso 2x2 Embaralhado")
ax2.legend()


plt.tight_layout()
plt.show()

```

# Questão

Para a detecção correta de uma modulação, é necessário que se conheçam as condições do canal no receptor. Uma prática comum para estimar o canal é a utilização de uma sequência conhecida, como um *preamble* ou símbolos piloto, ou seja, uma série de dados conhecidos para que o sistema possa analisar e comparar com o que está sendo recebido. Esses símbolos conhecidos são transmitidos juntamente com os dados, permitindo que o receptor compare o sinal recebido com o esperado e, assim, estime o efeito do canal (fading, distorções). Essa estimativa é crucial para compensar distorções no sinal causadas pelo canal, como atenuação e desfasamento, permitindo uma decodificação um pouco mais precisa da modulação.






# References {-}