---
title: Diversidade na Recepção 
subtitle: Atividade 09
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
  Resumo da atividade.
keywords: 
  - Diversidade
date: last-modified
bibliography: bibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}

          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: Wireless Communications 
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

# Tarefa 1

A probabilidade de *outage*, $P_o$, para o canal Rayleigh, no caso de MRC (soma ponderada de todos os ramos) com um receptor de $M$ antenas é dada por

$$
  P_o = \frac{\Gamma\left[M, \left(2^r-1\right)/\bar{\gamma}\right]}{\Gamma\left(M\right)}
$$


Enquanto que no caso de SC (seleção do ramo com máximo SNR) com um receptor de $M$ antenas é dada por @goldsmith2020wireless.

$$
  P_o=\left[1-e^{(1-2^r)/\bar{\gamma}}\right]^M
$$

A [Fig. @fig-efficiency-points] apresenta as curvas solicitadas.

```{python}
#| label: fig-efficiency-points
#| fig-cap: A meaningless scatterplot
#| fig-width: 5
#| fig-height: 5
#| fig-align: center
#| out-width: 50%
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import gammainc, gamma

# Outage SC 
def outage_rayleigh_sc(gamma_bar, r, M):
    return (1 - np.exp((1 - 2**r) / gamma_bar))**M

# Outage MRC
def outage_rayleigh_mrc(gamma_bar, r, M):
    # Cálculo do argumento da função gama incompleta
    gamma_th = (2**r - 1) / gamma_bar
    # Cálculo da probabilidade de outage usando a função gama incompleta
    return gammainc(M, gamma_th)

# Parâmetros
r = 1  # taxa de transmissão (R/B)
gamma_bar = np.linspace(0.1, 1000, 10000)  # SNR médio variando de 0.1 a 20

# Calcular P_o para M = 1 e M = 3
P_o_M1 = outage_rayleigh_sc(gamma_bar, r, M=1)
P_o_SC_M2 = outage_rayleigh_sc(gamma_bar, r, M=2)
P_o_MRC_M2 = outage_rayleigh_mrc(gamma_bar, r, M=2)

# Plotar os resultados
plt.figure(figsize=(8, 6))
plt.plot(gamma_bar, P_o_M1, label='M = 1', color='#00F')
plt.plot(gamma_bar, P_o_SC_M2, label='SC, M = 2', color='#F00', linestyle='--')
plt.plot(gamma_bar, P_o_MRC_M2, label='MRC, M = 2', color='#228B22', linestyle='--')

# Configurações do gráfico
plt.margins(0)
plt.yscale('log')
plt.xscale('log')
plt.title('Outage com Diversidade RX')
plt.xlabel(r'$\overline{\gamma}$ (dB)')
plt.ylabel('Probabilidade de outage')
plt.grid(True, which='both', ls='--', linewidth=0.5)
plt.legend()
plt.ylim(1e-3, 1)

# Exibir o gráfico
plt.show()
```

# Tarefa 2

Utilizar o *selection combining* (SC) no canal Rayleigh obtém-se uma melhora significativa em relação a um canal Rayleigh com apenas uma antena no receptor, ficando num meio termo entre o pior (Rayleigh) e o melhor desempenho (AWGN).

```{python}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mtl
from scipy.special import erfc


# AWGN
def awgn(EbN0):
    return 0.5 * erfc(np.sqrt(EbN0))

# Rayleigh BER
def rayleigh_Pb(EbN0):
    return 0.5 * (1 - np.sqrt(EbN0 / (1 + EbN0)))

n_bits = int(1e7)
M = 2  # BPSK
bits = np.random.randint(0, 2, n_bits)  # Geração mais eficiente de bits
symbols = 2 * bits - 1
N0 = 1  # Densidade espectral de potência do ruído

EbN0_arr = np.arange(0, 20, 0.1)  # Amostragem mais fina para o gráfico
n = np.random.randn(n_bits) * np.sqrt(N0 / 2)  # Ruído AWGN

# Prealocação das listas de resultados
Pb_est = np.zeros(len(EbN0_arr))
Pb_theo = np.zeros(len(EbN0_arr))
Pb_awg = np.zeros(len(EbN0_arr))

# Gerando os canais Rayleigh uma vez, para economizar processamento
h1 = np.random.randn(n_bits) + 1j * np.random.randn(n_bits)
h2 = np.random.randn(n_bits) + 1j * np.random.randn(n_bits)
h1 = np.abs(h1) / np.sqrt(2)
h2 = np.abs(h2) / np.sqrt(2)

# Loop sobre os valores de EbN0
for idx, EbN0_db in enumerate(EbN0_arr):
    EbN0 = 10 ** (EbN0_db / 10)  # Conversão de dB para linear
    Es = EbN0 * N0  # Energia por símbolo

    # Gerando as amostras com fading
    samples1 = np.sqrt(Es) * symbols * h1
    samples2 = np.sqrt(Es) * symbols * h2
    samples = np.where(np.abs(samples1) > np.abs(samples2), samples1, samples2)

    # Adicionando ruído AWGN
    samples += n

    # Decodificação dos bits recebidos
    bits_est = (samples > 0).astype(int)
    
    # Contagem de erros
    errors = np.sum(bits_est != bits)
    ber_est = errors / n_bits

    # Cálculo do BER teórico para Rayleigh
    Pb_theo[idx] = rayleigh_Pb(EbN0)

    Pb_est[idx] = ber_est

    # BER AWGN (para comparação)
    Pb_awg[idx] = awgn(EbN0)

# Plotando os resultados
plt.figure(figsize=(16, 10))
plt.ylim(bottom=1e-5, top=1)
plt.plot(EbN0_arr, Pb_est, label='Rayleigh com SC (M = 2)')
plt.plot(EbN0_arr, Pb_awg, label='AWGN')
plt.plot(EbN0_arr, Pb_theo, label='Rayleigh')
plt.xlabel('Eb/N0 [dB]', fontsize=20)
plt.ylabel('Pb', fontsize=20)
plt.yscale('log')
plt.legend(fontsize=20)
plt.title('BER para BPSK', fontsize=24)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.show()



```



# References {-}